#HTML Code:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic Tac Toe</title>
    <link rel="stylesheet" href="style.css">
    <script defer src="script.js"></script>
</head>
<body>
    <div class="main-container">
        <header>
            <h3>Tic Tac Toe</h3>
            <div class="themes-container">
                <button class="theme-button" onclick="document.documentElement.setAttribute('color-scheme','default-light')" style="background-color: #D45757"></button>
                <button class="theme-button" onclick="document.documentElement.setAttribute('color-scheme','default-dark')" style="background-color: #262D3C"></button>
                <button class="theme-button" onclick="document.documentElement.setAttribute('color-scheme','mono-light')" style="background-color: white"></button>
                <button class="theme-button" onclick="document.documentElement.setAttribute('color-scheme','mono-dark')" style="background-color: black"></button>
                <button class="theme-button" onclick="document.documentElement.setAttribute('color-scheme','solarized-light')" style="background-color: #FDF6E3"></button>
                <button class="theme-button" onclick="document.documentElement.setAttribute('color-scheme','solarized-dark')" style="background-color: #073642"></button>
            </div>
            <select id="player-select">
                <option value="1">1 player</option>
                <option value="2">2 player</option>
            </select>
        </header>
        <div class="spacer"></div>
        <div class="status-container">
            <h1 id="status-1" class="x" style="left: 50%">X'S TURN</h1>
            <h1 id="status-2" class="o" style="left: 200%">O'S TURN</h1>
        </div>
        <div class="box-container">
            <button id="0-0" class="box square" onclick="makePlayerMove(0,0)"></button>
            <button id="0-1" class="box square" onclick="makePlayerMove(0,1)"></button>
            <button id="0-2" class="box square" onclick="makePlayerMove(0,2)"></button>
            <button id="1-0" class="box square" onclick="makePlayerMove(1,0)"></button>
            <button id="1-1" class="box square" onclick="makePlayerMove(1,1)"></button>
            <button id="1-2" class="box square" onclick="makePlayerMove(1,2)"></button>
            <button id="2-0" class="box square" onclick="makePlayerMove(2,0)"></button>
            <button id="2-1" class="box square" onclick="makePlayerMove(2,1)"></button>
            <button id="2-2" class="box square" onclick="makePlayerMove(2,2)"></button>
        </div>
        <div class="spacer" style="flex-grow: 2"></div>
        <button id="restart" onclick="restart()">Restart</button>
    </div>
</body>
</html>

#CSS Code:

@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;900&display=swap');

:root{
    --background-color: white;
    --x-color-primary: #D45757;
    --x-color-shadow: #D4575740;
    --o-color-primary: #373434;
    --o-color-shadow: #37343420;
}

[color-scheme="default-dark"]{
    --background-color: #262D3C;
    --x-color-primary: #D45757;
    --x-color-shadow: #D4575740;
    --o-color-primary: white;
    --o-color-shadow: #FFFFFF10;
}

[color-scheme="mono-light"]{
    --background-color: white;
    --x-color-primary: black;
    --x-color-shadow: #00000020;
    --o-color-primary: black;
    --o-color-shadow: #00000020;
}

[color-scheme="mono-dark"]{
    --background-color: black;
    --x-color-primary: white;
    --x-color-shadow: #FFFFFF30;
    --o-color-primary: white;
    --o-color-shadow: #FFFFFF30;
}

[color-scheme="solarized-light"]{
    --background-color: #FDF6E3;
    --x-color-primary: #CB4B16;
    --x-color-shadow: #CB4B1635;
    --o-color-primary: #586E75;
    --o-color-shadow: #586E7540;
}

[color-scheme="solarized-dark"]{
    --background-color: #073642;
    --x-color-primary: #CB4B16;
    --x-color-shadow: #CB4B1640;
    --o-color-primary: #eee8d5;
    --o-color-shadow: #eee8d520;
}



html, body{
    margin: 0;
    padding: 0;
    width: 100%;
    height: 100%;
    font-family: "Poppins", sans-serif;
    color:var(--o-color-primary);
    background-color: var(--background-color);
}

/*if view is small, scale down a bit*/
/* if width or height is less than 600px*/
@media screen and (max-width: 600px), screen and (max-height: 800px){
    html, body{
        zoom: 0.9;
    }
}
    
.main-container{
    width: 100%;
    height: 100%;
    padding: 40px 0;
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    align-items: center;
}

.spacer{
    flex-grow: 1;
}

header{
    display: flex;
    flex-direction: column;
    align-items: center;
}

header h3{
    font-weight: 500;
    margin: 5px
}

.theme-button{
    width: 25px;
    height: 25px;
    border-radius: 50%;
    margin: 5px;
    padding: 0;
    border: 1px solid rgba(0,0,0,0.2)
}

header select{
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    padding: 5px;
    margin: 5px;
    border-radius: 5px;
    background: none;
    border: 1px solid var(--x-color-primary);
    color: var(--x-color-primary)
}

.status-container{
    position: relative;
    width: 100%;
    height: 100px;
    overflow: hidden;
}

.status-container h1{
    position: absolute;
    font-size: 45px;
    font-weight: 900;
    white-space: nowrap;
    margin: 0;
    transform: translateX(-50%);

}

.status-container h1.x {color: var(--x-color-primary)}
.status-container h1.o {color: var(--o-color-primary)}

#restart {
    background-color: var(--o-color-primary);
    padding: 5px 15px;
    border-radius: 100px;
    border: none;
    color: var(--background-color);
    font-family: 'Poppins', sans-serif;
}


.box-container{
    display: grid;
    grid-template-columns: 100px 100px 100px;
    grid-template-rows: 100px 100px 100px;
}



/*drop shadow is causing graphical glitches on non-chrome browsers, so I decided to use pseudo-elements instead*/
/*the pseudo-element basically creates a shadow by making a copy of the element */

.box, .box::after{
    background: transparent;
    transition: background 0.3s ease, border-radius 0.4s ease, border 0.3s ease,transform 0.2s ease, width 0.2s ease, height 0.2s ease, margin 0.2s ease;
    padding: 0;
}
.box::after{
    content: "";
    position: absolute;
    transform: translateX(-50%) translateY(-50%);
    opacity: 0.3;
    box-sizing: border-box;
}


.box.square, .box.square::after{
    margin: 15px;
    width: 70px;
    height: 70px;
    border: 1px solid var(--x-color-primary);
    /* filter: drop-shadow(12px 12px 0px var(--x-color-shadow)); */
    border-radius: 15px;
}

.box.circle, .box.circle::after {
    margin: 12.5px;
    width: 75px;
    height: 75px;
    border: 1px solid var(--o-color-primary);
    /* filter: drop-shadow(12px 12px 0px var(--o-color-shadow)); */
    border-radius: 50%;
}


.box:hover, .box:hover::after{
    border-width: 5px;
}

.box:active, .box:active::after{
    border-width: 10px;
}

button,select{
    transition: transform 0.2s ease;
}

button:not(.box):hover, select:hover{
    transform: scale(1.1);
}

button:not(.box):active , select:not(.box):active{
    transform: scale(0.9);
}

.box.square.filled, .box.square.filled::after {
    border: 35px solid var(--x-color-primary);
    background: var(--x-color-primary);
}

.box.circle.filled, .box.circle.filled::after {
    border: 18px solid var(--o-color-primary);
}

#Java Script

let board = Array(3).fill(0).map(() => Array(3).fill("square-empty"));

let step = 0;
let hasWon = false

let is2player = false
let playerSelect = document.querySelector("#player-select")

playerSelect.addEventListener("change", () => {
    console.log(playerSelect.value);
    if (playerSelect.value == "2") {
        is2player = true
    } else {
        is2player = false
    }
})

function makePlayerMove(x, y) {
    if (step % 2 == 0 || is2player) {
        makeMove(x, y)
    }
}

function makeMove(x, y) {
    if ((board[x][y] == "square-empty" || board[x][y] == "circle-empty") && !hasWon) {
        board[x][y] = step % 2 == 0 ? "square-filled" : "circle-filled";
        step++;

        for (let i in board) {
            for (let j in board[i]) {
                if (board[i][j] == "square-empty" || board[i][j] == "circle-empty") {
                    board[i][j] = step % 2 == 0 ? "square-empty" : "circle-empty";
                }
            }
        }

        updateBoard();

        let win = checkWin(board)
        if (win) {
            hasWon = true
            for (let i in board) {
                for (let j in board[i]) {
                    let isWinner = false
                    for (let point of win) {
                        if (point.x == i && point.y == j) {
                            isWinner = true
                        }
                    }
                    if (!isWinner) {
                        if (board[i][j] == "square-filled") board[i][j] = "square-empty"

                        if (board[i][j] == "circle-filled") board[i][j] = "circle-empty"
                    }
                }
            }
            let point = win[0]
            let isX = board[point.x][point.y] == "square-filled"
            updateTitle(isX ? "X WINS" : "O WINS", isX)

            //moved this inside the check win section, so it wouldn't update every move
            setTimeout(() => {
                updateBoard()
            }, 1000)

        } else if (step >= 9) {
            //added conditional to check for draws
            updateTitle("DRAW", false)
        } else {
            if (!is2player && step % 2 == 1) {
                setTimeout(() => {
                    let move = MiniMax(board, step).move
                    makeMove(move.x, move.y)
                }, 500)
            }
            updateTitle(step % 2 == 0 ? "X'S TURN" : "O'S TURN", step % 2 == 0)
        }

    }
}

function checkWin(board) {
    let lines = [
        [{ x: 0, y: 0 }, { x: 0, y: 1 }, { x: 0, y: 2 }],
        [{ x: 1, y: 0 }, { x: 1, y: 1 }, { x: 1, y: 2 }],
        [{ x: 2, y: 0 }, { x: 2, y: 1 }, { x: 2, y: 2 }],
        [{ x: 0, y: 0 }, { x: 1, y: 0 }, { x: 2, y: 0 }],
        [{ x: 0, y: 1 }, { x: 1, y: 1 }, { x: 2, y: 1 }],
        [{ x: 0, y: 2 }, { x: 1, y: 2 }, { x: 2, y: 2 }],
        [{ x: 0, y: 0 }, { x: 1, y: 1 }, { x: 2, y: 2 }],
        [{ x: 2, y: 0 }, { x: 1, y: 1 }, { x: 0, y: 2 }],
    ]
    for (let line of lines) {
        let [a, b, c] = line
        if (board[a.x][a.y] == board[b.x][b.y] &&
            board[a.x][a.y] == board[c.x][c.y] &&
            board[a.x][a.y] != "square-empty" &&
            board[a.x][a.y] != "circle-empty") {

            return line
        }
    }
}

function getWinner(board) {
    let win = checkWin(board)
    if (win) {
        let point = win[0]
        let isX = board[point.x][point.y] == "square-filled"
        return isX ? 1 : -1
    }
}

function copyBoard(board) {
    return board.map(row => row.slice())
}

function MiniMax(board, step) {

    let score = getWinner(board)
    if (score) return { score: score * -1 }
    if (step == 9) return { score: 0 }

    let bestScore = step % 2 == 0 ? -Infinity : Infinity
    let bestMove = {}
    for (let i in board) {
        for (let j in board[i]) {
            if (board[i][j] == "square-empty" || board[i][j] == "circle-empty") {
                let copiedBoard = copyBoard(board)
                copiedBoard[i][j] = step % 2 == 0 ? "square-filled" : "circle-filled"
                let result = MiniMax(copiedBoard, step + 1)
                let score = result.score
                if (step % 2 == 0) {
                    if (score > bestScore) {
                        bestScore = score
                        bestMove = { x: i, y: j }
                    }
                } else {
                    if (score < bestScore) {
                        bestScore = score
                        bestMove = { x: i, y: j }
                    }
                }
            }
        }
    }

    return { score: bestScore, move: bestMove }

}

function updateBoard() {
    for (let i = 0; i < 3; i++) {
        for (let j = 0; j < 3; j++) {
            let element = document.getElementById(i + '-' + j);
            switch (board[i][j]) {

                case "square-empty":
                    element.className = "box square"
                    break;
                case "circle-empty":
                    element.className = "box circle"
                    break;
                case "square-filled":
                    element.className = 'box square filled';
                    break;
                case "circle-filled":
                    element.className = 'box circle filled';
                    break;
            }
        }
    }
}

//here is a bit more change, essentially there is a graphics glitch were if you click too fast (quicker than the settimeout completes)
//it will cause the title to snap to the second one with no transition
//solution is to make a queue with an array, and ensure that the titles animate one after the other
//this will technically cause it to lag behind, but unless you are playing way faster than possible, it should be fine

let titles = []


//new function that pushes a title to the queue
function updateTitle(name, isX) {
    let length = titles.length
    titles.push({ name: name, isX: isX })

    //if the array was empty before we added a title, we need to call the function again


    if (length == 0) {
        updateIndividualTitle()
    }
}

//og function got renamed to updateIndividualTitle
function updateIndividualTitle() {
    //get first element in array
    let title = titles[0]


    let status1 = document.querySelector("#status-1")
    let status2 = document.querySelector("#status-2")
    //title has been renamed to title.name, isX is renamed to title.isX
    status2.innerHTML = title.name
    status2.className = title.isX ? "x" : "o"
    status1.style.transition = "left 0.5s ease"
    status2.style.transition = "left 0.5s ease"
    status1.style.left = "-50%"
    status2.style.left = "50%"
    setTimeout(() => {
        status1.style.transition = ""
        status2.style.transition = ""
        status1.style.left = "50%"
        status2.style.left = "200%"
        //same here
        status1.innerHTML = title.name
        status1.className = title.isX ? "x" : "o"

        //remove first element of title after we're done
        titles.shift()

        //check if there is more items in the array, if yes, call it again
        if (titles.length > 0) {
            //request animation frame basically just waits one frame before calling the function again
            //this way the resetting part of the funciton in the setTimeout is not called the same frame as when the function is called again
            //if you remove the request animation frame, the transitions will not work properly
            requestAnimationFrame(updateIndividualTitle)
        }
    }, 500)


}

function restart() {
    board = Array(3).fill(0).map(() => Array(3).fill("square-empty"));
    step = 0;
    hasWon = false;
    updateTitle("X'S TURN", true)
    updateBoard();
}




